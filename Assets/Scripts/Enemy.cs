using System.Collections;using System.Collections.Generic;using UnityEngine;public class Enemy : MonoBehaviour{    // handle to the player     Player _player;    SpawnManager _spawnManager;    [SerializeField]    private GameObject _smallAsteroid;        [SerializeField]    Asteroid _asteroid;    Animator _animator;    UI_Manager _uiManager;    Camera _camera;    [SerializeField]    private int _sum;    //tesging.     [SerializeField]    private int _whichEnemy;    public bool isAddSum = false;    public bool isSmallShield = false;    public bool isShakin ;   // private GameObject _newEnemy;    [SerializeField]    private AudioClip _enemyExplosionSound;    AudioSource _audiosource;    // Start is called before the first frame update    void Start()    {        _camera = GameObject.FindWithTag("MainCamera").GetComponent<Camera>();        _spawnManager = GameObject.FindWithTag("spawnManager").GetComponent<SpawnManager>();        _player = GameObject.FindWithTag("player").GetComponent<Player>();        if(_camera == null)         {            Debug.Log("camera working ");                }        if (_spawnManager != null)         {           // Debug.Log("spawnmanger working");        }        if (_player == null)        {            Debug.Log("player problem");        }        _animator = GetComponent<Animator>();        if (_animator == null)        {            Debug.Log("animator problem");        }        _audiosource = GetComponent<AudioSource>();                       if (_audiosource == null)         {           Debug.Log( "audiosource on enemy is null " );                }          else           {            _audiosource.clip = _enemyExplosionSound;          }    }    // Update is called once per frame    void Update()    {        EnemyMovmementDown();     }           private void OnTriggerEnter2D(Collider2D other)    {      //  Debug.Log("Player have just collided with " + other);        if (other.tag == "player")        {            Player player = other.transform.GetComponent<Player>();            if (player != null && _player._isShieldsActive == false)            {                player.Damage();                _camera.CameraShakenAllOver();                Debug.Log("is Shakin");                EnemyExplosion();            }        }        if (other.tag == "laser")        {            //_spawnManager.eitherEnemy.name == "SmallAsteroid            EnemyExplosion();            Debug.Log("player laser tag is on:");            Score();            Destroy(other.gameObject, .25f);        }        if (other.tag == "Shields")        {            _player.Shield();        }        if(other.tag == "EnemyLaser")         {            Debug.Log("farky  enemy laser collided  ");        }        if (other.name == "Ammo")         {            _player.ammoCount = 15;                }    }    IEnumerator Waiting()    {        isAddSum = false;               yield return new WaitForSeconds(.1f);    }    private void EnemyExplosion()    {             _animator.SetTrigger("EnemyExplosionTrigger");               _animator.SetTrigger("SmallAsteroidExplosion");               _audiosource.Play();        Destroy(GetComponent< Collider2D > ());        Destroy(gameObject, .5f);    }    private void Score()    {        isAddSum = true;        if (isAddSum == true)        {            _player.ScoreAdditiion();        }        StartCoroutine(Waiting());    }      private void EnemyMovmementDown()    {        if( _spawnManager.eitherEnemy.name == "Enemy")         {            transform.Translate(Vector3.down * Time.deltaTime * 1.0f);        }        else if(_spawnManager.eitherEnemy.name == "SmallAsteroid")         {            transform.Translate(Vector3.down * Time.deltaTime * 1.0f);        }        if (transform.position.y <= -5f)        {            float RandRange = Random.Range(-8f, 8f);            transform.position = new Vector3(RandRange, 1.5f);        }    }   }