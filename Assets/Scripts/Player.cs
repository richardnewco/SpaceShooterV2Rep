using System.Collections;using System.Collections.Generic;using UnityEngine;public class Player : MonoBehaviour{    public SpriteRenderer spriteRenderer;    [SerializeField]    private GameObject _LaserPrefab;    [SerializeField]    private GameObject _thrusterRight;    [SerializeField]    private GameObject _thrusterLeft;    [SerializeField]    private GameObject _tripleShotPrefab;    [SerializeField]    private GameObject _shields;    //testing    // handle       FillBar _fillBar;    //handle to spawnManger    SpawnManager _spawnManager;    [SerializeField]    private float _canFire = -1f;    [SerializeField]    private float _fireRate = 5f;    [SerializeField]    public int _lives = 3;    [SerializeField]    private float _speed = 3.5f;    [SerializeField]    private float _increaseSpeed = 7.0f;    public int score;    Enemy _enemy;    AudioSource _audioSource;    [SerializeField]    private AudioClip _laserFireSound;    public bool _isTripleShot = false;    //testing    public bool isTripleShotSmallActive = false;    public bool _isSpeedIncrease = false;    public bool _isShieldsActive = false;    public bool isSmallShieldsActive = false;    private bool _isLeftShift = false;    Camera _camera;    public int ammoCount = 15;    // Start is called before the first frame update    private void Start()    {        _thrusterRight.gameObject.SetActive(false);        _thrusterLeft.gameObject.SetActive(false);        _camera = GameObject.FindWithTag("MainCamera").GetComponent<Camera>();        if (_camera == null)        {            Debug.Log("Camera assigned");        }        _spawnManager = GameObject.FindWithTag("spawnManager").GetComponent<SpawnManager>();        if (_spawnManager == null)        {            Debug.Log("Spawnmanager prob");        }        if (_LaserPrefab == null)        {            Debug.Log("LaserPrefab prob");        }        transform.position = new Vector3(0, 0, 0);        if (_tripleShotPrefab == null)        {            Debug.Log("LaserTripleShotPrefab exists");        }        if (spriteRenderer == null)        {            Debug.Log("sprite Rendererer prob.");        }        // turn off the sprite renderer on start        spriteRenderer.enabled = false;        _enemy = GameObject.FindWithTag("enemy").GetComponent<Enemy>();        if (_enemy != null)        {            Debug.Log("enemy exists");        }        _audioSource = GetComponent<AudioSource>();        if (_audioSource != null)        {            Debug.Log("audiosource exists");        }        _audioSource.clip = _laserFireSound;              _fillBar = GameObject.FindWithTag("fillBar").GetComponent<FillBar>();            if (_fillBar == null)             {                Debug.Log("fillbar exists");            }    }    // Update is called once per frame    void Update()    {        Movement();        if (Input.GetKeyDown(KeyCode.Space) && ammoCount > 0)        {            ammoCount--;            // Debug.Log("AmmoCount " + ammoCount);            FireLaser();        }        //testing        Thrusters();    }    void Movement()    {        float _horizontalInput = Input.GetAxis("Horizontal");        float _verticalInput = Input.GetAxis("Vertical");        Vector3 direction = new Vector3(_horizontalInput, _verticalInput, 0);        transform.Translate(direction * _speed * Time.deltaTime);        LeftSpaceSpeed();        // x and y constraints for player        if (transform.position.y >= 3.8)        {            transform.position = new Vector3(transform.position.x, 3.8f, 0);        }        else if (transform.position.y <= -3.8f)        {            transform.position = new Vector3(transform.position.x, -3.8f, 0);        }        if (transform.position.x >= 9f)        {            transform.position = new Vector3(-9f, transform.position.y, 0);        }        else if (transform.position.x < -9f)        {            transform.position = new Vector3(9f, transform.position.y, 0);        }    }        void FireLaser()    {        _canFire = +Time.time + _fireRate;        if (ammoCount > 1)        {            _canFire = 1f;        }        if (_isTripleShot == true)        {            Instantiate(_tripleShotPrefab, transform.position, Quaternion.identity);            _audioSource.Play();        }        else        {            Vector3 _laserOffset = new Vector3(0f, 1.05f, 0f);            Instantiate(_LaserPrefab, transform.position + _laserOffset, Quaternion.identity);            _audioSource.Play();        }    }    public void Damage()    {        _lives--;              if (_lives == 2)        {            _camera.CameraShakenAllOver();            _fillBar.Slider();        }        if (_lives == 1)        {            _camera.CameraShakenAllOver();            _fillBar.Slider();        }        if (_lives < 1)        {            Destroy(this.gameObject);            _camera.CameraShakenAllOver();            _spawnManager.StopSpawning();        }         }    public void TripleShotActive()    {        _isTripleShot = true;        //testing        isTripleShotSmallActive = true;        StartCoroutine(TripleShotTime());    }    IEnumerator TripleShotTime()    {        yield return new WaitForSeconds(5f);        _isTripleShot = false;        isTripleShotSmallActive = false;        //testing    }    public void SpeedIncrease()    {        _isSpeedIncrease = true;        _speed = 12f;        StartCoroutine(DecreaseSpeed());    }    IEnumerator DecreaseSpeed()    {        yield return new WaitForSeconds(5f);        _isSpeedIncrease = false;        _speed = 3f;    }    // shield stuff     public void Shield()    {        if (_isShieldsActive == true)        {            spriteRenderer.enabled = true;            isSmallShieldsActive = true;            // turn on the shield.            // StartCoroutine(_shieldDisable());        }    }    private IEnumerator _shieldDisable()    {        yield return new WaitForSeconds(10.0f);        spriteRenderer.enabled = false;        _isShieldsActive = false;        isSmallShieldsActive = false;    }    public int ScoreAdditiion()    {        score += 10;        return score;    }    public float Lives()    {        // how many lives         return _lives;    }    public void LeftSpaceSpeed()    {        if (Input.GetKeyUp(KeyCode.LeftShift))        {            _speed = 5f;            // Debug.Log("Speed Increase is OFF." + _speed);        }        if (Input.GetKeyDown(KeyCode.LeftShift))        {            _speed += _increaseSpeed;            //Debug.Log("Speed Increase is on." + _speed);        }    }    public void Ammo()    {        _isTripleShot = false;        ammoCount = 15;    }    public void AddALife()    {        if (_lives < 3)        {            _lives++;            }    }    public  void Thrusters()     {            if (_lives >2)        {                       _thrusterRight.gameObject.SetActive(false);            _thrusterLeft.gameObject.SetActive(false);        }        if (_lives == 2 )                   {                       _thrusterRight.gameObject.SetActive(true);            _thrusterLeft.gameObject.SetActive(false);        }        if (_lives == 1)              {                      _thrusterRight.gameObject.SetActive(true);            _thrusterLeft.gameObject.SetActive(true);        }    }}